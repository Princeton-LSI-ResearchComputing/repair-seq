#!/usr/bin/env python3.6

import argparse
import subprocess
from pathlib import Path

import yaml
import tqdm

def parallel(args):
    from ddr import pooled_screen

    pool = pooled_screen.PooledScreen(args.base_dir, args.pool, progress=tqdm.tqdm)

    # Create parent results dir to avoid race condition
    results_dir = args.base_dir / 'results' / args.pool
    results_dir.mkdir(exist_ok=True)

    def process_stage(stage):
        parallel_command = [
            'parallel',
            '-n', '3', 
            '--bar',
            '--max-procs', str(args.max_procs),
            'ddr',
            '--base_dir', str(args.base_dir),
            'process', ':::',
        ]

        arg_tuples = [(args.pool, guide, str(stage)) for guide in pool.guides]
        for t in sorted(arg_tuples):
            parallel_command.extend(t)
        
        subprocess.check_call(parallel_command)

    process_stage(0)

    pool.make_common_sequences()
    parallel_common_sequences(args)
    pool.write_common_outcome_files()
    pool.merge_common_sequence_special_alignments()

    process_stage(1)

    pool.make_outcome_counts()
    pool.merge_special_alignments()

def parallel_common_sequences(args):
    from ddr import pooled_screen

    pool = pooled_screen.PooledScreen(args.base_dir, args.pool)
    
    parallel_command = [
        'parallel',
        '-n', '2', 
        '--bar',
        '--max-procs', str(args.max_procs),
        'ddr',
        '--base_dir', str(args.base_dir),
        'process_common_sequences', ':::',
    ]

    arg_pairs = [(args.pool, chunk_name) for chunk_name in pool.common_sequence_chunk_names]
    for pair in sorted(arg_pairs):
        parallel_command.extend(pair)
    
    subprocess.check_call(parallel_command)

def process(args):
    from ddr import pooled_screen

    sample_sheet_fn = args.base_dir / 'data' / args.pool / 'sample_sheet.yaml'
    description = yaml.load(sample_sheet_fn.read_text())

    exp = pooled_screen.SingleGuideExperiment(args.base_dir, args.pool, args.guide, description, progress=args.progress)

    exp.process(args.stage)

def process_common_sequences(args):
    from ddr import pooled_screen

    exp = pooled_screen.CommonSequenceExperiment(args.base_dir, args.pool, args.chunk, progress=args.progress)
    exp.process()

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='subcommand', title='subcommands')
subparsers.required = True

parser_process = subparsers.add_parser('process')
parser_process.add_argument('pool')
parser_process.add_argument('guide')
parser_process.add_argument('stage', type=int, choices=[0, 1])
parser_process.add_argument('--progress', const=tqdm.tqdm, action='store_const')
parser_process.set_defaults(func=process)

parser_parallel = subparsers.add_parser('parallel')
parser_parallel.add_argument('max_procs', type=int)
parser_parallel.add_argument('pool')
parser_parallel.set_defaults(func=parallel)

parser_process_cs = subparsers.add_parser('process_common_sequences')
parser_process_cs.add_argument('pool')
parser_process_cs.add_argument('chunk')
parser_process_cs.add_argument('--progress', const=tqdm.tqdm, action='store_const')
parser_process_cs.set_defaults(func=process_common_sequences)

parser.add_argument('--base_dir', type=Path, default=Path.home() / 'projects' / 'ddr')

args = parser.parse_args()
args.func(args)
